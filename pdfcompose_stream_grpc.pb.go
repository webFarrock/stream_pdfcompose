// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package stream_pdfcompose

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PdfComposeClient is the client API for PdfCompose service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PdfComposeClient interface {
	CreatePdf(ctx context.Context, opts ...grpc.CallOption) (PdfCompose_CreatePdfClient, error)
}

type pdfComposeClient struct {
	cc grpc.ClientConnInterface
}

func NewPdfComposeClient(cc grpc.ClientConnInterface) PdfComposeClient {
	return &pdfComposeClient{cc}
}

func (c *pdfComposeClient) CreatePdf(ctx context.Context, opts ...grpc.CallOption) (PdfCompose_CreatePdfClient, error) {
	stream, err := c.cc.NewStream(ctx, &PdfCompose_ServiceDesc.Streams[0], "/pdfcompose.PdfCompose/CreatePdf", opts...)
	if err != nil {
		return nil, err
	}
	x := &pdfComposeCreatePdfClient{stream}
	return x, nil
}

type PdfCompose_CreatePdfClient interface {
	Send(*Upfiles) error
	Recv() (*PdfResult, error)
	grpc.ClientStream
}

type pdfComposeCreatePdfClient struct {
	grpc.ClientStream
}

func (x *pdfComposeCreatePdfClient) Send(m *Upfiles) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pdfComposeCreatePdfClient) Recv() (*PdfResult, error) {
	m := new(PdfResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PdfComposeServer is the server API for PdfCompose service.
// All implementations must embed UnimplementedPdfComposeServer
// for forward compatibility
type PdfComposeServer interface {
	CreatePdf(PdfCompose_CreatePdfServer) error
	mustEmbedUnimplementedPdfComposeServer()
}

// UnimplementedPdfComposeServer must be embedded to have forward compatible implementations.
type UnimplementedPdfComposeServer struct {
}

func (UnimplementedPdfComposeServer) CreatePdf(PdfCompose_CreatePdfServer) error {
	return status.Errorf(codes.Unimplemented, "method CreatePdf not implemented")
}
func (UnimplementedPdfComposeServer) mustEmbedUnimplementedPdfComposeServer() {}

// UnsafePdfComposeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PdfComposeServer will
// result in compilation errors.
type UnsafePdfComposeServer interface {
	mustEmbedUnimplementedPdfComposeServer()
}

func RegisterPdfComposeServer(s grpc.ServiceRegistrar, srv PdfComposeServer) {
	s.RegisterService(&PdfCompose_ServiceDesc, srv)
}

func _PdfCompose_CreatePdf_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PdfComposeServer).CreatePdf(&pdfComposeCreatePdfServer{stream})
}

type PdfCompose_CreatePdfServer interface {
	Send(*PdfResult) error
	Recv() (*Upfiles, error)
	grpc.ServerStream
}

type pdfComposeCreatePdfServer struct {
	grpc.ServerStream
}

func (x *pdfComposeCreatePdfServer) Send(m *PdfResult) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pdfComposeCreatePdfServer) Recv() (*Upfiles, error) {
	m := new(Upfiles)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PdfCompose_ServiceDesc is the grpc.ServiceDesc for PdfCompose service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PdfCompose_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pdfcompose.PdfCompose",
	HandlerType: (*PdfComposeServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreatePdf",
			Handler:       _PdfCompose_CreatePdf_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/pdfcompose_stream.proto",
}
